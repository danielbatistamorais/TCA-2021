"use strict";
/*
 * edge-supercharged
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Supercharged = void 0;
const slash_1 = __importDefault(require("slash"));
const path_1 = require("path");
const helpers_1 = require("@poppinss/utils/build/helpers");
/**
 * Allows registering components path with an easy to use name
 */
class Supercharged {
    constructor() {
        /**
         * List of registered components
         */
        this.components = {};
        /**
         * Plugin fn for edge
         */
        this.wire = (edge, firstRun) => {
            /**
             * Reset components on each run. The "discoverComponents"
             * calls will collect them
             */
            this.components = {};
            Object.keys(edge.loader.mounted).forEach((diskName) => {
                if (diskName === 'default') {
                    this.discoverComponents(edge.loader.mounted[diskName]);
                }
                else {
                    this.discoverComponents(edge.loader.mounted[diskName], {
                        prefix: diskName,
                        diskName: diskName,
                    });
                }
            });
            /**
             * Do not re-run the following code when it is a recurring
             * run
             */
            if (!firstRun) {
                return;
            }
            /**
             * Claim tags registered with supercharged
             */
            edge.compiler.claimTag((name) => {
                if (this.components[name]) {
                    return { seekable: true, block: true };
                }
                return null;
            });
            edge.asyncCompiler.claimTag((name) => {
                if (this.components[name]) {
                    return { seekable: true, block: true };
                }
                return null;
            });
            /**
             * Process tags
             */
            edge.processor.process('tag', ({ tag }) => {
                const component = this.components[tag.properties.name];
                if (!component) {
                    return;
                }
                tag.properties.name = 'component';
                if (tag.properties.jsArg.trim() === '') {
                    tag.properties.jsArg = `'${component.path}'`;
                }
                else {
                    tag.properties.jsArg = `'${component.path}',${tag.properties.jsArg}`;
                }
            });
        };
    }
    /**
     * Register a component
     */
    registerComponent(name, path) {
        this.components[name] = { path };
        return this;
    }
    /**
     * Discover components from a given directory
     */
    discoverComponents(basePath, options = {}) {
        const components = (0, helpers_1.fsReadAll)((0, path_1.join)(basePath, 'components'), (file) => file.endsWith('.edge'));
        components.forEach((file) => {
            file = (0, slash_1.default)(file);
            const name = file
                .replace(/\.edge$/, '') // Drop extension
                .split('/') // Split path
                .map((segment) => helpers_1.string.camelCase(segment)) // Convert each segment to camelCase
                .join('.'); // Join by .
            /**
             * Register the component
             */
            this.registerComponent(options.prefix ? `${options.prefix}.${name}` : name, 
            /**
             * Do not normalize the path here. Edge wants unix style paths
             */
            `${options.diskName ? `${options.prefix}::` : ''}components/${file}`);
        });
        return this;
    }
}
exports.Supercharged = Supercharged;
