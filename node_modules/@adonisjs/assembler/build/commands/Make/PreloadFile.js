"use strict";
/*
 * @adonisjs/assembler
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const slash_1 = __importDefault(require("slash"));
const path_1 = require("path");
const standalone_1 = require("@adonisjs/core/build/standalone");
const Base_1 = require("./Base");
/**
 * Command to make a new preloaded file
 */
class MakePreloadFile extends Base_1.BaseGenerator {
    constructor() {
        super(...arguments);
        this.createExact = true;
        /**
         * List of allowed environments
         */
        this.allowedEnvironments = ['console', 'web', 'repl'];
    }
    /**
     * Validates environments to ensure they are allowed. Especially when
     * defined as a flag.
     */
    validateEnvironments(environments) {
        return !environments.find((environment) => !this.allowedEnvironments.includes(environment));
    }
    /**
     * Returns the template stub path
     */
    getStub() {
        return path_1.join(__dirname, '..', '..', 'templates', 'preload-file.txt');
    }
    /**
     * Path to the start directory
     */
    getDestinationPath() {
        return this.application.rcFile.directories.start || 'start';
    }
    async prepare() {
        this.environment = await this.prompt.multiple('Select the environment(s) in which you want to load this file', [
            {
                name: 'console',
                message: 'During ace commands',
            },
            {
                name: 'repl',
                message: 'During repl session',
            },
            {
                name: 'web',
                message: 'During HTTP server',
            },
        ], {
            validate(choices) {
                return choices && choices.length ? true : 'Use space to select the environment';
            },
        });
    }
    /**
     * Run command
     */
    async run() {
        const environments = typeof this.environment === 'string'
            ? this.environment.split(',')
            : this.environment;
        /**
         * Show error when defined environments are invalid
         */
        if (!this.validateEnvironments(environments)) {
            this.logger.error(`Invalid environments "${environments}". Only "${this.allowedEnvironments}" are allowed`);
            return;
        }
        /**
         * Generate resource file
         */
        this.resourceName = this.name;
        const file = await super.generate();
        if (!file) {
            return;
        }
        /**
         * Update preload file
         */
        const { files } = await Promise.resolve().then(() => __importStar(require('@adonisjs/sink')));
        const relativePath = file.toJSON().relativepath;
        const rcFile = new files.AdonisRcFile(this.application.appRoot);
        if (environments && environments.length) {
            rcFile.setPreload(`./${slash_1.default(relativePath).replace(path_1.extname(relativePath), '')}`, environments);
        }
        else {
            rcFile.setPreload(`./${slash_1.default(relativePath).replace(path_1.extname(relativePath), '')}`);
        }
        rcFile.commit();
    }
}
/**
 * Command name
 */
MakePreloadFile.commandName = 'make:prldfile';
/**
 * Command description
 */
MakePreloadFile.description = 'Make a new preload file';
__decorate([
    standalone_1.args.string({ description: 'Name of the file' }),
    __metadata("design:type", String)
], MakePreloadFile.prototype, "name", void 0);
__decorate([
    standalone_1.flags.string({
        description: 'Define the environment in which you want to load this file',
    }),
    __metadata("design:type", Array)
], MakePreloadFile.prototype, "environment", void 0);
exports.default = MakePreloadFile;
