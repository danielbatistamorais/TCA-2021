"use strict";
/*
 * @adonisjs/validator
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.email = void 0;
const isEmail_1 = __importDefault(require("validator/lib/isEmail"));
const normalizeEmail_1 = __importDefault(require("validator/lib/normalizeEmail"));
const helpers_1 = require("../../Validator/helpers");
const RULE_NAME = 'email';
const DEFAULT_MESSAGE = 'email validation failed';
/**
 * Validation signature for the "email" regex. Non-string values are
 * ignored.
 */
exports.email = {
    compile: helpers_1.wrapCompile(RULE_NAME, ['string'], (args) => {
        const options = Object.assign({
            domainSpecificValidation: false,
            allowIpDomain: false,
            ignoreMaxLength: false,
            sanitize: false,
        }, args[0]);
        /**
         * Compute sanitization options
         */
        let sanitizationOptions;
        if (options.sanitize) {
            if (options.sanitize === true) {
                sanitizationOptions = { all_lowercase: true };
            }
            else if (helpers_1.isObject(options.sanitize)) {
                sanitizationOptions = { all_lowercase: options.sanitize.lowerCase };
            }
        }
        return {
            compiledOptions: {
                domain_specific_validation: options.domainSpecificValidation,
                allow_ip_domain: options.allowIpDomain,
                ignore_max_length: options.ignoreMaxLength,
                sanitize: sanitizationOptions,
            },
        };
    }),
    validate(value, compiledOptions, { errorReporter, arrayExpressionPointer, pointer, mutate }) {
        /**
         * Ignore non-string values. The user must apply string rule
         * to validate string.
         */
        if (typeof value !== 'string') {
            return;
        }
        /**
         * Invalid email
         */
        if (!isEmail_1.default(value, compiledOptions)) {
            errorReporter.report(pointer, RULE_NAME, DEFAULT_MESSAGE, arrayExpressionPointer);
            return;
        }
        /**
         * Apply lower case sanitization
         */
        if (compiledOptions.sanitize?.all_lowercase) {
            mutate(normalizeEmail_1.default(value, compiledOptions.sanitize));
        }
    },
};
