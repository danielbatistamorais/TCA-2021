"use strict";
/*
 * @adonisjs/fold
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearRequireCache = exports.ensureIsFunction = exports.isObject = exports.isClass = exports.isPrimtiveConstructor = exports.isEsm = void 0;
const utils_1 = require("@poppinss/utils");
const toString = Function.prototype.toString;
/**
 * Returns a boolean telling if value is an esm module
 * with `export default`.
 */
function isEsm(value) {
    return value && value.__esModule;
}
exports.isEsm = isEsm;
/**
 * Returns a boolean telling if value is a primitive or object constructor.
 */
function isPrimtiveConstructor(value) {
    return [String, Function, Object, Date, Number, Boolean].indexOf(value) > -1;
}
exports.isPrimtiveConstructor = isPrimtiveConstructor;
/**
 * Returns a function telling if value is a class or not
 */
function isClass(fn) {
    return typeof fn === 'function' && /^class\s/.test(toString.call(fn));
}
exports.isClass = isClass;
/**
 * Returns a boolean to differentiate between null and objects
 * and arrays too
 */
function isObject(value) {
    return value && typeof value === 'object' && !Array.isArray(value);
}
exports.isObject = isObject;
/**
 * Raises error with a message when callback is not
 * a function.
 */
function ensureIsFunction(callback, message) {
    if (typeof callback !== 'function') {
        throw new utils_1.Exception(message, 500, 'E_RUNTIME_EXCEPTION');
    }
}
exports.ensureIsFunction = ensureIsFunction;
/**
 * Clears the require cache for a given module
 */
function clearRequireCache(modulePath) {
    const cacheItem = require.cache[modulePath];
    if (!cacheItem) {
        return;
    }
    /**
     * Just remove the module, when there is no
     * parent
     */
    delete require.cache[modulePath];
    if (!cacheItem.parent) {
        return;
    }
    let i = cacheItem.parent.children.length;
    /**
     * Remove reference from the parent
     */
    while (i--) {
        if (cacheItem.parent.children[i].id === modulePath) {
            cacheItem.parent.children.splice(i, 1);
        }
    }
}
exports.clearRequireCache = clearRequireCache;
