"use strict";
/**
 * @adonisjs/session
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Session provider for AdonisJS
 */
class SessionProvider {
    constructor(app) {
        this.app = app;
    }
    /**
     * Register Session Manager
     */
    register() {
        this.app.container.singleton('Adonis/Addons/Session', () => {
            const { SessionManager } = require('../src/SessionManager');
            return new SessionManager(this.app, this.app.config.get('session', {}));
        });
    }
    boot() {
        /**
         * Hook session into ctx during request cycle. We make use of hooks over
         * middleware, since Hooks guarantee the `after` execution even when
         * any middleware or controller raises exception.
         */
        this.app.container.withBindings(['Adonis/Core/Server', 'Adonis/Core/HttpContext', 'Adonis/Addons/Session'], (Server, HttpContext, Session) => {
            /**
             * Sharing session with the context
             */
            HttpContext.getter('session', function session() {
                return Session.create(this);
            }, true);
            /**
             * Do not register hooks when sessions are disabled
             */
            if (!this.app.config.get('session.enabled', true)) {
                return;
            }
            /**
             * Initiate session store
             */
            Server.hooks.before(async (ctx) => {
                await ctx.session.initiate(false);
            });
            /**
             * Commit store mutations
             */
            Server.hooks.after(async (ctx) => {
                await ctx.session.commit();
            });
        });
    }
}
exports.default = SessionProvider;
SessionProvider.needsApplication = true;
